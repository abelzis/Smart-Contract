var Web3 = require("web3");
const express = require("express");
const path = require("path");
var app = express();

const PORT = 3212;

var web3 = new Web3("ws://localhost:8545");

// console.log(web3);

app.use(express.urlencoded({ extended: true }));
app.use(express.static(__dirname + "/src")); // to load .css

web3.eth.getAccounts().then(console.log);

// var defaultAcc = (web3.eth.defaultAccount =
//   "0x82e5eCC22d8eC20A22295c4D8432E66102cd8fc6");

var buyerAddress =
  "0xe82d784c198cc34e6509757a89d7f160fa767d7f532bde2b16b9de9191e738a3";
var purchasestockimageContract = new web3.eth.Contract([
  {
    constant: false,
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string"
      },
      {
        internalType: "string",
        name: "webAddress",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256"
      }
    ],
    name: "addPhoto",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "photoID",
        type: "uint256"
      }
    ],
    name: "buyPhoto",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "buyerAddress",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address"
      },
      {
        indexed: false,
        internalType: "string",
        name: "title",
        type: "string"
      },
      {
        indexed: false,
        internalType: "string",
        name: "webAddress",
        type: "string"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isBought",
        type: "bool"
      }
    ],
    name: "PhotoAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address"
      },
      {
        indexed: false,
        internalType: "string",
        name: "title",
        type: "string"
      },
      {
        indexed: false,
        internalType: "string",
        name: "webAddress",
        type: "string"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isBought",
        type: "bool"
      }
    ],
    name: "PhotoBought",
    type: "event"
  },
  {
    constant: true,
    inputs: [],
    name: "buyer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
]);

var s = purchasestockimageContract.methods.addPhoto(
  "Titanikas",
  "https://img.thedailybeast.com/image/upload/c_crop,d_placeholder_euli9k,h_675,w_1200,x_0,y_0/dpr_2.0/c_limit,w_740/fl_lossy,q_auto/v1493049783/articles/2012/04/12/the-titanic-s-haute-heroine-the-countess-of-rothes/titanic-cs_hslaqx",
  10
);

//console.log(s);

// var purchasestockimage = purchasestockimageContract.send(
//   buyerAddress,
//   {
//     from: web3.eth.accounts[0],
//     data:
//       "0x6080604052600060035534801561001557600080fd5b50604051610b99380380610b998339818101604052602081101561003857600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610abf806100da6000396000f3fe60806040526004361061003f5760003560e01c80637150d8ae146100445780638da5cb5b1461009b578063a361b1e6146100f2578063b2bf58261461025b575b600080fd5b34801561005057600080fd5b50610059610289565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100a757600080fd5b506100b06102af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100fe57600080fd5b506102596004803603606081101561011557600080fd5b810190808035906020019064010000000081111561013257600080fd5b82018360208201111561014457600080fd5b8035906020019184600183028401116401000000008311171561016657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101c957600080fd5b8201836020820111156101db57600080fd5b803590602001918460018302840111640100000000831117156101fd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506102d4565b005b6102876004803603602081101561027157600080fd5b8101908080359060200190929190505050610643565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610396576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5065726d697373696f6e2064656e6965642e000000000000000000000000000081525060200191505060405180910390fd5b60036000815480929190600101919050555060405180608001604052808481526020018381526020018281526020016000151581525060026000600354815260200190815260200160002060008201518160000190805190602001906103fd9291906109e5565b50602082015181600101908051906020019061041a9291906109e5565b506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050507ff0dda02851c7c0b3d66776f0877a7ab68c72d54ca327603b9aeaabd21da455e5336002600060035481526020019081526020016000206000016002600060035481526020019081526020016000206001016002600060035481526020019081526020016000206002015460026000600354815260200190815260200160002060030160009054906101000a900460ff16604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001858152602001841515151581526020018381038352878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156105a85780601f1061057d576101008083540402835291602001916105a8565b820191906000526020600020905b81548152906001019060200180831161058b57829003601f168201915b505083810382528681815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561062b5780601f106106005761010080835404028352916020019161062b565b820191906000526020600020905b81548152906001019060200180831161060e57829003601f168201915b505097505050505050505060405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53656e646572206e6f7420617574686f72697a65642e0000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060030160009054906101000a900460ff1661079c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f50686f746f20697320616c726561647920626f756768742e000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060030160009054906101000a900460ff166109e25760016002600083815260200190815260200160002060030160006101000a81548160ff0219169083151502179055507f8b8c1c2a0fbaa02dddcaed543285f982c313cf43503f99f420c90acf9a9a456433600260008481526020019081526020016000206000016002600085815260200190815260200160002060010160026000868152602001908152602001600020600201546002600087815260200190815260200160002060030160009054906101000a900460ff16604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018581526020018415151515815260200183810383528781815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561094b5780601f106109205761010080835404028352916020019161094b565b820191906000526020600020905b81548152906001019060200180831161092e57829003601f168201915b50508381038252868181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156109ce5780601f106109a3576101008083540402835291602001916109ce565b820191906000526020600020905b8154815290600101906020018083116109b157829003601f168201915b505097505050505050505060405180910390a15b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a2657805160ff1916838001178555610a54565b82800160010185558215610a54579182015b82811115610a53578251825591602001919060010190610a38565b5b509050610a619190610a65565b5090565b610a8791905b80821115610a83576000816000905550600101610a6b565b5090565b9056fea265627a7a723158205572f2aba79c68e44d40f9ea7b00a89baef3e62005d876f7a1bbf5ab462280a664736f6c634300050b0032",
//     gas: "4700000"
//   },
//   function(e, contract) {
//     console.log(e, contract);
//     if (typeof contract.address !== "undefined") {
//       console.log(
//         "Contract mined! address: " +
//           contract.address +
//           " transactionHash: " +
//           contract.transactionHash
//       );
//     }
//   }
// );

console.log(web3.eth.Contract.defaultAccount);

const router = express.Router();

router.get("/", function(req, res) {
  res.sendFile(path.join(__dirname + "/src/index.html"));
  res.send;
});

// app.post("/", async function(req, res) {
//   await writeToFile(req.body);
//   res.redirect("/"); // Redirect to new same page
//   // res.json({
//   //   success: true,
//   //   body: req.body
//   // });
// });

app.use("/", router);
app.listen(PORT, () => console.log(`Server app listening on port ${PORT}!`));
